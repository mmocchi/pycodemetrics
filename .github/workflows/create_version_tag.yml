name: Create Tag and Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (e.g., 1.0.0)'
        required: true

permissions:
  contents: write
  actions: write

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry toml requests

    - name: Check if tag exists
      id: check-tag
      run: |
        if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
          echo "Error: Tag v${{ github.event.inputs.version }} already exists."
          exit 1
        fi

    - name: Check if version exists on TestPyPI
      run: |
        python - <<EOF
        import requests
        package_name = "pycodemetrics"  # Replace with your package name
        version = "${{ github.event.inputs.version }}"
        url = f"https://test.pypi.org/pypi/{package_name}/{version}/json"
        response = requests.get(url)
        if response.status_code == 200:
          print(f"Error: Version {version} already exists on TestPyPI.")
          exit(1)
        print(f"Version {version} does not exist on TestPyPI. Proceeding with release.")
        EOF

    - name: Update version in pyproject.toml
      id: update-version
      run: |
        python - <<EOF
        import toml

        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)

        old_version = data['tool']['poetry']['version']
        new_version = '${{ github.event.inputs.version }}'

        if old_version != new_version:
            data['tool']['poetry']['version'] = new_version
            with open('pyproject.toml', 'w') as f:
                toml.dump(data, f)
            print("Version updated from {} to {}".format(old_version, new_version))
            print("version_changed=true")
        else:
            print("Version unchanged: {}".format(old_version))
            print("version_changed=false")

        print(f"version={new_version}")
        EOF

        # Set the outputs for the step
        if grep -q "version_changed=true" <<< "$(python -)"; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
        echo "version=$(python - | grep '^version=' | cut -d'=' -f2)" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      if: steps.update-version.outputs.version_changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.update-version.outputs.version }}"
        git push

    - name: Create new tag
      run: |
        git tag v${{ github.event.inputs.version }}
        git push origin v${{ github.event.inputs.version }}

    - name: Build package
      run: poetry build

    - name: Upload to TestPyPI
      uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.update-version.outputs.version }} \
          --title "Release v${{ steps.update-version.outputs.version }}" \
          --draft \
          --generate-notes \
          ./dist/*.whl
