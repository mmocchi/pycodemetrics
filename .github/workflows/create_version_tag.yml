name: Create Tag and Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (e.g., 1.0.0)'
        required: true

permissions:
  contents: write
  actions: write

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry toml

    - name: Update version in pyproject.toml
      run: |
        python - <<EOF
        import toml

        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)

        data['tool']['poetry']['version'] = '${{ github.event.inputs.version }}'

        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)
        EOF

    - name: Commit changes
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add pyproject.toml
        git commit -m "Bump version to ${{ github.event.inputs.version }}"
        git push

    - name: Create and push tag
      run: |
        git tag v${{ github.event.inputs.version }}
        git push origin v${{ github.event.inputs.version }}

    - name: Build package
      run: poetry build

    - name: Upload to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/*.whl
        asset_name: package-${{ github.event.inputs.version }}.whl
        asset_content_type: application/octet-stream
