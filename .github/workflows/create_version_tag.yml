# このワークフローは、新しいバージョンタグを作成しリリースをテストするためのものです。
# 手動でトリガーされ、バージョン番号を入力として受け取ります。
# 実行するとDraftのリリースを作成します。
name: Create Tag and Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (e.g., 1.0.0)'
        required: true

permissions:
  contents: write
  actions: write

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:

    # リポジトリをチェックアウト
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Pythonのセットアップ
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # 依存関係のインストール
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry toml requests

    # 指定したタグが存在するか確認
    # タグが存在する場合はエラーを出力して終了
    # タグが存在しない場合は次のステップに進む
    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
          echo "Error: Tag v${{ github.event.inputs.version }} already exists."
          exit 1
        fi

    # TestPyPIにバージョンが存在するか確認
    # バージョンが存在する場合はエラーを出力して終了
    # バージョンが存在しない場合は次のステップに進む
    - name: Check if version exists on TestPyPI
      run: |
        python - <<EOF
        import requests
        package_name = "pycodemetrics"  # Replace with your package name
        version = "${{ github.event.inputs.version }}"
        url = f"https://test.pypi.org/pypi/{package_name}/{version}/json"
        response = requests.get(url)
        if response.status_code == 200:
          print(f"Error: Version {version} already exists on TestPyPI.")
          exit(1)
        print(f"Version {version} does not exist on TestPyPI. Proceeding with release.")
        EOF

    # pyproject.tomlファイルのバージョンを更新
    # バージョンが変更された場合は次のステップに進む
    # バージョンが変更されなかった場合はステップをスキップ
    - name: Update version in pyproject.toml
      id: update-version
      run: |
        OUTPUT_FILE="${GITHUB_OUTPUT}"
        python - <<EOF > "${OUTPUT_FILE}"
        import toml
        import sys

        try:
            with open('pyproject.toml', 'r') as f:
                data = toml.load(f)

            old_version = data['tool']['poetry']['version']
            new_version = '${{ github.event.inputs.version }}'

            if old_version != new_version:
                data['tool']['poetry']['version'] = new_version
                with open('pyproject.toml', 'w') as f:
                    toml.dump(data, f)
                print("version_changed=true")
                print(f"old_version={old_version}")
            else:
                print("version_changed=false")

            print(f"version={new_version}")
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOF

        cat "${OUTPUT_FILE}"

    # デバッグ出力
    - name: Debug output
      run: |
        echo "Version changed: ${{ steps.update-version.outputs.version_changed }}"
        echo "New version: ${{ steps.update-version.outputs.version }}"
        echo "Old version: ${{ steps.update-version.outputs.old_version }}"

    - name: Commit and push changes
      if: steps.update-version.outputs.version_changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.update-version.outputs.version }}"
        git push

    # 新しいタグを作成
    - name: Create new tag
      run: |
        git tag v${{ steps.update-version.outputs.version }}
        git push origin v${{ steps.update-version.outputs.version }}

    # パッケージをビルド
    - name: Build package
      run: poetry build

    # TestPyPIにアップロード
    - name: Upload to TestPyPI
      uses: pypa/gh-action-pypi-publish@v1.9.0
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    # リリースを作成
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.update-version.outputs.version }} \
          --title "Release v${{ steps.update-version.outputs.version }}" \
          --draft \
          --generate-notes \
          ./dist/*.whl \
          ./dist/*.tar.gz
